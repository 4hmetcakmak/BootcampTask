# -*- coding: utf-8 -*-
"""CEV_VBE_Chp-4Tasks.ipynb adlı not defterinin kopyası

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TZgq5dwPx7G4lFDblMTMlsvzVPJQpECY

**TASK-1A**
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import seaborn as sns
# %matplotlib inline
import matplotlib.pyplot as plt
sns.set()
x=np.linspace(0,10,1000)
fig = plt.figure()
ax = plt.axes()
ax.plot(np.sin(x),np.sin(x)*np.cos(x),color="g",linestyle="-", label="label1")
ax.plot(np.sin(x),np.sin(x)+np.cos(x),color="blue",linestyle=":",label="label2");
plt.ylim(-2,2)
plt.xlim(-1.2,1.2)
ax.legend()

"""**TASK-1B**"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import seaborn as sns
# %matplotlib inline
import matplotlib.pyplot as plt
sns.set()
rng=np.random.RandomState(42)
x=rng.normal(0,0.1,(2,100))
y=rng.normal(0,0.1,(2,100))
hue=1000*rng.normal(0,0.1,(2,100))
color=rng.normal(0,0.1,(2,100))
plt.scatter(x,y,s=hue,c=color,alpha=0.5);

"""**TASK-1C**

*NOT: 2 farklı hücrede gösterildi*
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import seaborn as sns
# %matplotlib inline
import matplotlib.pyplot as plt
sns.set()
x = np.linspace(0, 5, 75)
z = 0.8
y = np.sin(x) + z * np.random.randn(75)
plt.errorbar(x,y,yerr=z,fmt=".k")

x = np.linspace(0, 5, 75)
z = 0.5
y = np.sin(x) + z * np.random.randn(75)
plt.errorbar(x,y,yerr=z,fmt=".k")

"""**Task-1D**"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import seaborn as sns
# %matplotlib inline
import matplotlib.pyplot as plt
sns.set()
from sklearn.gaussian_process import GaussianProcessRegressor as GP
x=np.array([2,3,7,8,9])
y=x*np.sin(x)
gp = GP()
gp.fit(x[:, np.newaxis], y)
xfit = np.linspace(0, 10, 1000)
yfit= gp.predict(xfit[:, np.newaxis])
dyfit = 2 *

"""**TASK-1E**"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import seaborn as sns
# %matplotlib inline
import matplotlib.pyplot as plt
sns.set()
def f(x, y):
    return np.sin(x) **5 + np.cos(10 + y * x) * np.cos(x)
x = np.linspace(0, 10, 100)
y = np.linspace(0, 10, 60)
X,Y= np.meshgrid(x,y)
Z=f(X,Y)
plt.contour(X, Y, Z,20,cmap="twilight");

"""**TASK-1F**

*NOT: 2 hücre şeklinde yapılmıştır*
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import seaborn as sns
# %matplotlib inline
import matplotlib.pyplot as plt
sns.set()
mean = [0, 0]
cov = [[1, 100], [0, 10]]
x, y = np.random.multivariate_normal(mean, cov, 5000).T
plt.hist2d(x,y,bins=15,cmap="summer");
plt.colorbar();

plt.hexbin(x, y, gridsize=30, cmap='summer'); #hexagonal
plt.colorbar();

"""**TASK-2A**"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import seaborn as sns
# %matplotlib inline
import matplotlib.pyplot as plt
sns.set()
x = np.linspace(0, 10, 10)
y=np.sin(x)
z=np.cos(x)
fig, ax = plt.subplots()
ax.plot(x, y, '-b', label='Sin(x)')
ax.plot(x, z, '--r', label='Cosin(x)')
leg = ax.legend();

"""**TASK-2B**"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import pandas as pd
!pip install basemap
from mpl_toolkits.basemap import Basemap
import matplotli