# -*- coding: utf-8 -*-
"""CEV_Odev.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AVA4OVYs5r2-LL1BkgqWGJBrDyn9mYdr

**Task1-a**
"""

import numpy as np

def sumofnegative(x):
  if int(x)>0:
     print("Code isn't work.")
  sum=0
  for i in range(-1,int(x)):
    sum+= i
    print(str(sum))

"""**TASK-1B**"""

def fact(x):
  sum=1
  for i in range(1,x+1):
    sum=sum*i
    print(str(sum))

fact(5)

"""**TASK-1C**

"""

x=np.random.randint(1,49, (6,8)) #burada doğru size değerleri girilmezse üretmez veyahut size değerlerinin yerleri
#yanlış girilirse üretmez
x

"""**TASK-1D**"""

y=np.arange(1,100)
x=y[y%2==1].reshape((5,10))
x

"""**TASK-1E**"""

# Commented out IPython magic to ensure Python compatibility.
a= np.linspace(0,100, endpoint=True)
a
b=np.random.rand(10, 5)
# %matplotlib inline 
import matplotlib.pyplot as plt
import seaborn; seaborn.set()
plt.scatter(a, b, s=100)

a.size

"""**TASK-2A**"""

x=np.arange(100).reshape((10,10))
y,z =np.split(x,2)
y
z
t,c = np.split(x,2,axis=1)
t
c
x=np.concatenate([y,z])
x

"""**TASK-2B**"""

import numpy as np
mu, sigma= 50, 15
def exArray():
  count=0
  a=np.random.normal(mu, sigma,(3,4,5))
  for i in range(5):
    for j in range(4):
      for q in range(3):
        if (a[q][j][i]>75):
          count=count+1

exArray=np.vectorize(exArray, otypes=[np.float64])
exArray()

a[a>75]

"""**Task-2c**"""

def rnd_ch(x):
  return np.random.choice(x)
x=np.random.randint(1,100,(3,4))
a=np.ravel(x)
a
rnd_ch(a)

"""**TASK-2D**"""

import pandas as pd 
df=pd.read_csv("https://raw.githubusercontent.com/jakevdp/PythonDataScienceHandbook/master/notebooks/data/president_heights.csv")["height(cm)"]
print("The shortest president: ", df.min())
print("The longest president: ", df.max())
print("Average heights of presidents: ", df.mean())
print("Standart deviation:", df.std())

df

?plt.hist() #burada etiketdüzenlerine bakmak için yaptım ama bulamadım hocam argüamnı

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline 
import matplotlib.pyplot as plt
plt.hist(df, bins=5)
plt.show()

"""**TASK-2E**"""

import pandas as pd
df=pd.read_csv("sample_data/california_housing_train.csv")["median_income"]
df
descriptive_statistics=df.describe().T
descriptive_statistics

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline 
import matplotlib.pyplot as plt
plt.hist(df)
plt.show()

"""**TASK-2F**"""

a #sonraki ile karşılaştırabilmeniz için koydum bunu hocam

import numpy as np
a=np.random.randint(0,100,100)
average_a=a.mean()
x=np.where(a>average_a)

"""**TASK-2G**"""

# Commented out IPython magic to ensure Python compatibility.
mu, sigma= 70, 15
a=np.random.normal(mu, sigma, 1000)
# %matplotlib inline #first method
import matplotlib.pyplot as plt
plt.hist(a)
plt.show()

"""**TASK-2H**"""

import numpy as np
import pandas as pd
import seaborn; seaborn.set() 
df=pd.DataFrame(np.array([  0,  41,  15,   0,   0,   3, 122,  97,  58,  43, 213,  15,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   5,   0,   0,   0,   0,
         0,  89, 216,   0,  23,  20,   0,   0,   0,   0,   0,   0,  51,
         5, 183, 170,  46,  18,  94, 117, 264, 145, 152,  10,  30,  28,
        25,  61, 130,   3,   0,   0,   0,   5, 191, 107, 165, 467,  30,
         0, 323,  43, 188,   0,   0,   5,  69,  81, 277,   3,   0,   5,
         0,   0,   0,   0,   0,  41,  36,   3, 221, 140,   0,   0,   0,
         0,  25,   0,  46,   0,   0,  46,   0,   0,   0,   0,   0,   0,
         5, 109, 185,   0, 137,   0,  51, 142,  89, 124,   0,  33,  69,
         0,   0,   0,   0,   0, 333, 160,  51,   0,   0, 137,  20,   5,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  38,
         0,  56,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,  18,  64,   0,   5,  36,  13,   0,
         8,   3,   0,   0,   0,   0,   0,   0,  18,  23,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   3, 193,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   5,   0,   0,   0,   0,   0,   0,   0,
         0,   5, 127, 216,   0,  10,   0,   0,   0,   0,   0,   0,   0,
         0,   0,   0,   0,   0,   0,   0,  84,  13,   0,  30,   0,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   5,
         3,   0,   0,   0,   3, 183, 203,  43,  89,   0,   0,   8,   0,
         0,   0,   0,   0,   0,   0,   0,   0,   0,   3,  74,   0,  76,
        71,  86,   0,  33, 150,   0, 117,  10, 320,  94,  41,  61,  15,
         8, 127,   5, 254, 170,   0,  18, 109,  41,  48,  41,   0,   0,
        51,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,  36, 152,
         5, 119,  13, 183,   3,  33, 343,  36,   0,   0,   0,   0,   8,
        30,  74,   0,  91,  99, 130,  69,   0,   0,   0,   0,   0,  28,
       130,  30, 196,   0,   0, 206,  53,   0,   0,  33,  41,   0,   0,
         0]))
inches= df/254.0 #1/10mm--> inches
inches
rainy=(inches > 0)
rainy_days=inches[rainy].dropna()
print("Rainy day: ",rainy_days) #Number days with rain
without_rain_days=inches[~rainy].dropna()
print("Without rainy days: ",without_rain_days) #Number days without rain
bit_rain=(inches > 0.5)
bit_days=inches[bit_rain].dropna()
print("Bit days: ",bit_days) #Days with more than 0.5 inches
bit_rainy=(rainy_days < 0.2)
bit_rainydays=rainy_days[bit_rainy].dropna()
print("Bit rainy days: ",bit_rainydays) #Rainy days with < 0.2 inches
print(np.min(rainy_days))


print("Summer mean: ", np.mean(inches[171:262]))
print("Minimum precep of summer: ", np.min(inches[171:262]))
print("Mean precip on Non summer rainy day: ", np.mean(rainy_days[~171:262]))
print("Median precip on summer day: ", np.median(inches[171:262]))
print("Maxiumum precip on summer day: ", np.max(inches[171:262]))
print("Median precip on non-summer rainy days: ", np.median(rainy_days[~171:262]))

print("Median precip on rainy days: ", np.median(rainy_days))