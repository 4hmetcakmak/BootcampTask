# -*- coding: utf-8 -*-
"""CEVPandasTasks.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ck35htTdSWhMX2loraTa8DbugAVPFxv6

**Task-1A**
"""

import pandas as pd
import numpy as np
rng=np.random.RandomState(42)
x=pd.Series(rng.randint(15,69,99))
x[x>50].count() #50'den büyük kaç tane değer var

"""**TASK-1B**"""

import pandas as pd
import numpy as np 
df=pd.DataFrame(np.random.uniform(1,10,(50,5)),columns=["A","B","C","D","E"]) #Please provide a 2d Pandas DataFrame
print(df) 
#(of size 50 x 5) that is full of random floating numbers between 1 and 9.99
higherRow=df.iloc[:,:].sum(axis=1)>30#rows values sum that are higher than 30
higherColumn=df.loc[:,:].sum(axis=0)>300 #sütunlar az olduğu için elle yaptım ve hiç toplam 300ü geçen sütun yok 
print(higherRow)
print(higherColumn)

"""**TASK-2A**"""

import pandas as pd
df1=pd.DataFrame({"Names": ["Jack","Sarah","Michael","Kane","Elsonn","Scarlet","Henry"],"Height_(cm)": [170, 168, 187, 185, 190, 173, 193]})
df2=pd.DataFrame({"Names": ["Jack","Sarah","Michael","Kane","Elsonn","Scarlet","Henry"], "Weight_(Kg)": [69, 60, 85,82,78, 60, 92 ]})
df3=pd.DataFrame({"Names": ["Jack","Sarah","Michael","Kane","Elsonn","Scarlet","Henry"],"Foot_Sizes" : [40,38,43,43,37,36,42]})
a=pd.merge(df1,df2)
a=pd.merge(a, df3).set_index("Names")
a

"""**TASK-2B**"""

a["Body_mass_ındex"]=a["Weight_(Kg)"]/((a["Height_(cm)"]/100)**2)
a

"""**TASK-2C**"""

#belki daha kısa yolu vardır ancak ben aradığımda da sadece sampleı buldum np.random.choice ise tek boyutlu olarak çalışıyordu ben de ilk elimdeki df'i array yaotım 
y=np.array(a)
y=np.ravel(y) #array yaptıktan sonra ravel fonksiyonu ile tek boyutlu hale getirdim 
rng=np.random.RandomState(42) #sonra burada her çalıştırdığında sabit değer dönmesiiçin sabitleme yaptım 
print(rng.choice(y,3)) #3 random hücre seçtirdim 
#bunları da aşağıda gösterdim
a.loc["Sarah", "Foot_Sizes"]=np.nan
a.loc["Elsonn", "Body_mass_ındex"]=np.nan
a.loc["Kane", "Foot_Sizes"]=np.nan
a

"""**TASK-2D**"""

a.fillna(method="ffill")

"""**TASK-3A**"""

a=[("Jack",2021),("Jack",2022),("Sarah", 2021),("Sarah",2022), ("Michael", 2021),("Michael", 2022), ("Kane", 2021),("Kane",2022)]
weights=pd.Series([72,69,58,60,90,85,79,82], index=(a))
index=pd.MultiIndex.from_tuples(a)
weights=weights.reindex(index)
heights=pd.Series([169,170,168,168,184,187,185,185], index=(a))
df= pd.DataFrame({"Weights":weights, "Heights": heights})
df

"""**TASK-3B**"""

print(df.groupby("Weights").aggregate("mean"))
print(df.groupby("Heights").aggregate("mean"))
names=["jack","jack","sarah","sarah","michael","michael","kane","kane"]
df.groupby(names).aggregate("mean")

"""**TASK-3C**"""

print(df.stack()) 
print(df.unstack())
print(df.reset_index(inplace=True))
df.set_index(["level_0","level_1"])

"""**TASK-4A**

*Not: 3-4 hücreye bölerek yaptım bu task'i*
"""

import numpy as np
import pandas as pd
rng=np.random.RandomState(42)
a=rng.randint(0,100,(5,6))
sayısal_kursu=pd.DataFrame(a,index=["Ali","Veli","Ayşe","Fatma","Burçin"], columns=["Fizik","Kimya","Matematik","İngilizce","Geometri","Biyoloji"])
print(sayısal_kursu)
b=rng.randint(0,100,(6,7))
dil_kursu=pd.DataFrame(b, index=["Ali","Veli","Ayşe","Fatma","Burçin","Tuğçe"], columns=["Almanca","İngilizce","İngiliz_Edebiyatı","Temel_Fransızca","Türk_Edebiyatı","Aksan_Eğitimi","Konuşma_Eğitimi"])
print(dil_kursu)

merge_df= pd.merge(sayısal_kursu,dil_kursu,left_index=True,right_index=True)
merge_df

join_df=dil_kursu.join(sayısal_kursu,how="left",lsuffix='İngilizce') #join 
join_df

concat_df=pd.concat([sayısal_kursu,dil_kursu],join="inner") #concat
concat_df

"""**TASK-4B**

*NOT: Bu task de çok hücreye bölünmüş şekildedir*
"""

#Import the datasets for the USA population example.
import pandas as pd
import numpy as np
!curl -O https://raw.githubusercontent.com/jakevdp/PythonDataScienceHandbook/master/notebooks/data/state-population.csv
!curl -O https://raw.githubusercontent.com/jakevdp/data-USstates/master/state-areas.csv
!curl -O https://raw.githubusercontent.com/jakevdp/data-USstates/master/state-abbrevs.csv

#Then you are supposed to change one of the names of the states in areas by hand to a capital one such as from Alabama to ALABAMA.

#Then you should change all of the state names in areas and abbrevs to uppercase letters.

#Then you should add another column to the area data frame as km square and convert the values in the area column to km square in the new column.

abb=pd.read_csv("state-abbrevs.csv")
population= pd.read_csv("state-population.csv")
areas=pd.read_csv("state-areas.csv")
areas.loc[0,"state"]="ALABAMA"
abb["state"]=abb["state"].str.upper()
areas["state"]=areas["state"].str.upper()
areas["Km2"]=areas["area (sq. mi)"]*2.6

#Please merge the pandas’ data frames as done in the presented example and please name this dataframe as "final_df".
merge_df=pd.merge(population, abb, how="outer", left_on="state/region" ,right_on="abbreviation")
merge_df= merge_df.drop('abbreviation',1)
final_df=pd.merge(merge_df, areas)
final_df

#Then change 3 non-null values from this dataframe to null randomly for each of the following columns: state/region, state, year, ages.
for i in range(0,3):
  final_df.iloc[np.random.randint(0,2544), np.random.randint(0,5)] = None

#Then please find a practical way to fill in these nan values in a systematic way.
#NOT: aşağğıdaki kod hücresinde de analiz edip uygun doldurma yapıyorum 
print(final_df.isnull().any())
final_df[final_df["state/region"].isnull()]#burada nerede olduğunu gördüm ve aşağıda aralığına baktım 
final_df["state/region"].fillna(method="ffill",inplace=True) #aralığına baktıktan sonra uygun şekilde doldurdum
final_df[final_df["ages"].isnull()]#burada nerede olduğunu gördüm ve aşağıda aralığına baktım 
final_df["ages"].fillna("total", inplace=True)#aralığına baktıktan sonra uygun şekilde doldurdum
final_df[final_df["year"].isnull()]#burada nerede olduğunu gördüm ve aşağıda aralığına baktım
final_df["year"].fillna(1994.0,inplace=True)
final_df.isnull().any()

final_df.loc[1164:1169,"state/region"]
final_df.loc[1470:1476] #burada "ages" değişkeni için yılına baktım ve totalın girilmediğini gördüm 
final_df.loc[815:863] #burada year değişkeni için baktım ve 1994 yılının eksik olduğunu gördüm

"""**TASK-5**"""

import pandas as pd
import numpy as np
import seaborn as sns
planets=sns.load_dataset("planets")
planets.head()
planets.fillna(0, inplace=True)
decade=10*(planets["year"]//10)
decade=decade.astype(str)+"s"
decade.name="decade"
df=planets.groupby(["method", decade])["number","orbital_period","mass","distance"]
df.aggregate(["mean",sum,max])

df.transform(np.sqrt)

def mass_mean1(x):
    return x['mass'].mean() > 1
df.filter(mass_mean1)

df.apply(np.std,axis=0)

"""**TASK-6**"""

import pandas as pd
SaleData=pd.read_excel("/content/SaleData.xlsx")
print(SaleData.head())

"""**TASK-6A**"""

# Commented out IPython magic to ensure Python compatibility.
import seaborn as sns
# %matplotlib inline     
import matplotlib.pyplot as plt
sns.set()            #visualisation     
SaleData.pivot_table("Sale_amt", index="Region",columns="Manager", aggfunc="sum").plot(kind="bar", figsize=(10,6))
plt.xlabel("Region & Manager")
plt.ylabel("Total sale");

"""**TASK-6B**"""

SaleData.pivot_table("Units",index="Item",aggfunc="mean").plot(kind="bar",figsize=(5,3), legend=None)
plt.ylabel("Item-wise Unit Sold");

"""**TASK-6C**"""

SaleData.pivot_table("Sale_amt", index="Manager", aggfunc="mean").plot(kind="bar", figsize=(8,6))
plt.ylabel("Mean Value of Sale Amount")