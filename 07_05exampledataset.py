# -*- coding: utf-8 -*-
"""07.05ExampleDataSet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1myKskB_6MLncDlJ04WBq4BhUtV2tpISx

#TASK-12A

**Birkaç hücrede yapılmıştır**
"""

import pandas as pd
customer1= pd.read_csv("/content/AVM Müşterileri_v2.csv")
customer=customer1.drop(["ID","Cinsiyet"],axis=1)
customer.head()

customer.shape

# Commented out IPython magic to ensure Python compatibility.
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score
import numpy as np
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()

range_n_clusters = [2, 3, 4, 5, 6, 7, 8, 9]
for n_clusters in range_n_clusters:
  clusterer = KMeans(n_clusters=n_clusters, random_state=10)
  cluster_labels = clusterer.fit_predict(customer)
  silhouette_avg = silhouette_score(customer, cluster_labels)
  print(
        "For n_clusters =",
        n_clusters,
        "The average silhouette_score is :",
        silhouette_avg,
    )

"""Modeli 6 sınıf için kurmalıyız

#TASK-12B
"""

model=KMeans(n_clusters=6,random_state=10).fit(customer)
predict=model.predict(customer)
Customer=customer.copy()
Customer["Cinsiyet"]=customer1["Cinsiyet"]
dummy=pd.get_dummies(Customer["Cinsiyet"])
Customer=pd.concat((dummy,Customer),axis=1)
Customer.head()
Customer=Customer.drop(["K","Cinsiyet"], axis=1) #e=1 k=0
Customer.rename(columns={"E":"Cinsiyet"}, inplace=True)
Customer["Class"]=predict
Customer.head()
Customer.pivot_table(index="Class",columns="Cinsiyet",aggfunc={"Yas":["mean","std"],"Geliri":["mean","std"],"Skoru":["mean","std"]})

fig = plt.figure(figsize=(7,5))
ax = plt.axes(projection='3d')
ax.scatter3D(Customer["Yas"].values,Customer["Skoru"].values, Customer["Geliri"].values, c=Customer["Class"], cmap="viridis",alpha=0.7);
ax.view_init(30,50)

"""#TASK-12C

Yukarıdaki sınıfları şu şekilde yazabiliriz bence;

0 Yeni mezun yeni işe Başlamış evli olmayanlar: çünkü geliri orta seviyede harcaması da orta seviyede büyük ihtimal tek yaşıyorlar. genelde yeni işe giren ailesiyle yşayan kişilerdir bunlar

1 Orta Yaş zengin: gelirleri yüskek yaşları da orta yaşta ancak harcama alışkanlıkları çok yok bu da meşguliyetin göstergesi olabilir yani büyük ihtimalle iş insanları bunlar

2 Emekli: çünkü emeklilik yaşına yaklaşıklar ve gelirleri de ortalama bir emekli maaşı gibi yani. ayrıca harcamalarında da anormallik yok

3 Öğrenci: çünkü cepte para yok ama harcamaları yüksek ve yaşları genç

4 Yeni evli: gelirleri ve harcamaları yüksek yaşları da günümüz ortalama evlenme yaşlarına yakın olduğundan söyleyebiliriz veya yeni evlat sahibi olanlar da denebilir

5 istihdamdakilere Bağımlı nüfus: çünkü bunların gelirleri de yok harcamaları da orta büyük ihtimal ailesi ile yaşayan bir engeli de olabilir bir sebepten çalışmayan insanlar

#TASK-12D
"""

# Commented out IPython magic to ensure Python compatibility.
n_components=np.arange(1,10)
from sklearn.mixture import GaussianMixture as GM
# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
modelsGM=[GM(n, covariance_type="full",random_state=10).fit(customer)for n in n_components]
plt.plot(n_components, [m.bic(customer) for m in modelsGM], label='BIC')
plt.plot(n_components, [m.aic(customer) for m in modelsGM], label='AIC')
plt.legend(loc='best')
plt.xlabel('n_components');

gmm = GM(5, covariance_type='full', random_state=0)
modelGM=gmm.fit(customer)
predictGM=modelGM.predict(customer)
print(modelGM.converged_)

"""#TASK-12E"""

CustomerGM=Customer.copy()
CustomerGM=CustomerGM.drop("Class", axis=1)
CustomerGM["ClassGM"]=predictGM
CustomerGM.pivot_table(index="ClassGM",columns="Cinsiyet",aggfunc={"Yas":["mean","std"],"Geliri":["mean","std"],"Skoru":["mean","std"]})

"""#TASK-12F"""

new_customer=modelGM.sample(400)
(samples,ClassGMM)=new_customer
samples

fig, ax = plt.subplots(1, 2, sharex='col', sharey='row')
ax[0].scatter(samples[:, 0], samples[:, 1],
            c=ClassGMM, edgecolor='none', alpha=0.5,
            cmap="viridis")
ax[0].set_title("Sample of GMM")
ax[1].scatter(CustomerGM["Yas"], CustomerGM["Geliri"],
            c=CustomerGM["ClassGM"], edgecolor='none', alpha=0.7,
            cmap="viridis")
ax[1].set_title("Real sample");

fig = plt.figure(figsize = (7, 5))
ax = plt.axes(projection ="3d")
ax.scatter3D(samples[:,0],samples[:,1], samples[:,2],c=ClassGMM, marker='<', s=20, label='Triangle',alpha=0.5)
ax.scatter3D(CustomerGM["Yas"],CustomerGM["Geliri"], CustomerGM["Skoru"], c=CustomerGM["ClassGM"], marker='o',
             s=20, label='Circle',alpha=0.5 );

"""#TASK-12G"""

fig, ax = plt.subplots(1, 2, sharex='col', sharey='row')
ax[0].scatter(Customer["Yas"].values,Customer["Skoru"],
            c=Customer["Class"], edgecolor='none', alpha=0.7,
            cmap="viridis")
ax[0].set_title("KMeans")
ax[1].scatter(CustomerGM["Yas"], CustomerGM["Geliri"],
            c=CustomerGM["ClassGM"], edgecolor='none', alpha=0.7,
            cmap="viridis")
ax[1].set_title("GMM");

"""burada gmm nin daha çok gelire göre bir ayrıma gittiğini kmeansin ise daha karmaşık ayrıoma gittiğini görebiliyoruz. kmeans 6 sınıf uygun görürken GMM 5 sınıf uygun görmüştür"""